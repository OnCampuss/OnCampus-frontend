import React, { useEffect, useState, useRef } from 'react';
import { View, Text, StyleSheet, Image, ActivityIndicator, Button, Platform } from 'react-native';
import Routes from './src/routes/Routes';
import * as Notifications from 'expo-notifications';
import Constants from 'expo-constants';

export default function App() {
  const [isLoading, setIsLoading] = useState(true);
  const notificationListener = useRef();
  const responseListener = useRef();

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 2000);

    registerForPushNotificationsAsync().then(token => console.log(token));

    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {
      console.log('Notifica√ß√£o recebida:', notification);
    });

    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {
      console.log('Intera√ß√£o com a notifica√ß√£o:', response);
    });

    return () => {
      clearTimeout(timer);
      Notifications.removeNotificationSubscription(notificationListener.current);
      Notifications.removeNotificationSubscription(responseListener.current);
    };
  }, []);

  return (
    <>
      {isLoading ? (
        <View style={styles.loadingContainer}>
          <Image
            source={require('./assets/logo.png')}
            style={styles.splashImage}
            resizeMode="contain"
          />
          <ActivityIndicator size="large" color="#ffffff" />
          <Text style={styles.loadingText}>Carregando...</Text>
        </View>
      ) : (
        <Routes />
      )}
      <Button
        title="Enviar Notifica√ß√£o Local"
        onPress={async () => {
          await Notifications.scheduleNotificationAsync({
            content: {
              title: "Nova Notifica√ß√£o üì¨",
              body: 'Esta √© uma notifica√ß√£o de teste!',
            },
            trigger: { seconds: 2 },
          });
        }}
      />
    </>
  );
}

async function registerForPushNotificationsAsync() {
  let token;
  if (Constants.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('√â necess√°rio permitir as notifica√ß√µes para receber alertas!');
      return;
    }
    token = (await Notifications.getExpoPushTokenAsync()).data;
    console.log('Token do dispositivo:', token);
  } else {
    alert('Notifica√ß√µes Push s√≥ est√£o dispon√≠veis em dispositivos f√≠sicos.');
  }

  if (Platform.OS === 'android') {
    Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#FF231F7C',
    });
  }

  return token;
}

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#171717',
  },
  splashImage: {
    width: '80%',
    height: '40%',
    marginBottom: 20,
  },
  loadingText: {
    color: '#ffffff',
    fontSize: 20,
    marginTop: 20,
  },
});

-------------------------




